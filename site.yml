---
# This playbook is an example for deploying multiple instances into
# EC2 and "doing something" with them.

# This play operates on the local (Ansible control) machine.
- hosts: localhost
  connection: local
  gather_facts: True
  vars_files:
    - group_vars/aws/vars.yml
    - group_vars/aws/vault.yml

  tasks:
    - name: AWS Sydney private ssl key
      template: src=etc-ssl-private-site.key dest=/home/vagrant/.ssh/ansible.pem mode=0400
      tags:
         - configuration 
    - name: Copy ec2 ssh config 
      copy: content={{ssh_config_file}} dest=/home/vagrant/.ssh/config

    # The data about what instances are created is being saved by the “register” keyword in 
    # the variable named “ec2”.

    - name: Provision a set of instances
      ec2:
         aws_access_key: "{{ aws_access_key }}"
         aws_secret_key: "{{ aws_secret_key }}"
         key_name: ansible
         group: ansible-test
         instance_type: t2.nano
         assign_public_ip: yes
         vpc_subnet_id: subnet-8bd892cd
         image: "{{ ami_id }}"
         wait: true
         exact_count: 1
         count_tag:
            Name: Dev
         instance_tags:
            Name: Dev
         region: ap-southeast-2
      register: ec2
      tags:
         - provision

     # Use the add_host module to dynamically create a host group consisting of these new 
     # instances. This facilitates performing configuration actions on the hosts immediately 
     # in a subsequent task

    - name: Add new instances to host group
      add_host: 
        name: "{{item.public_dns_name}}" 
        groups: ec2hosts
      with_items: ec2.instances
    - name: Wait for SSH to come up
      wait_for: 
        host: "{{item.public_dns_name}}" 
        port: 22 
        delay: 60 
        timeout: 320 
        state: started
      with_items: ec2.instances

- hosts: ec2hosts
  name: configuration play
  user: ec2-user
  gather_facts: true

  tasks:

     - name: Check NTP service
       service: name=ntpd state=started
     - name: Docker repo install
       copy: src=docker.repo
        dest=/etc/yum.repos.d/
        owner=root group=root mode=0644
     - name: Install the latest version of docker engine
       yum: name=docker state=latest

...
